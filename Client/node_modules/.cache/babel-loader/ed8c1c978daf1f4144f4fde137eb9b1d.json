{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.colorChannel = void 0;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.private_safeAlpha = private_safeAlpha;\nexports.private_safeColorChannel = void 0;\nexports.private_safeDarken = private_safeDarken;\nexports.private_safeEmphasize = private_safeEmphasize;\nexports.private_safeLighten = private_safeLighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\n\nvar _utils = require(\"@mui/utils\");\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\n\nfunction clamp(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\n\n\nconst colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\n\nexports.colorChannel = colorChannel;\n\nconst private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n};\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nexports.private_safeColorChannel = private_safeColorChannel;\n\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = function (n) {\n    let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n\nfunction private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n\nfunction private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n\nfunction private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  let coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\nfunction private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","alpha","colorChannel","darken","decomposeColor","emphasize","getContrastRatio","getLuminance","hexToRgb","hslToRgb","lighten","private_safeAlpha","private_safeColorChannel","private_safeDarken","private_safeEmphasize","private_safeLighten","recomposeColor","rgbToHex","_utils","require","clamp","min","max","process","env","NODE_ENV","console","error","Math","color","slice","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","type","charAt","marker","indexOf","substring","Error","formatMuiErrorMessage","values","colorSpace","split","shift","parseFloat","decomposedColor","val","idx","warning","warn","i","h","s","l","a","f","k","rgb","push","Number","toFixed","foreground","background","lumA","lumB","coefficient"],"sources":["D:/AREACTPROJECTS@IMPORTANT/Frozen/MERL(NewSite)/Client/node_modules/@mui/system/colorManipulator.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.colorChannel = void 0;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.private_safeAlpha = private_safeAlpha;\nexports.private_safeColorChannel = void 0;\nexports.private_safeDarken = private_safeDarken;\nexports.private_safeEmphasize = private_safeEmphasize;\nexports.private_safeLighten = private_safeLighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\nvar _utils = require(\"@mui/utils\");\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nconst colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexports.colorChannel = colorChannel;\nconst private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexports.private_safeColorChannel = private_safeColorChannel;\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nfunction private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nfunction private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}