{"ast":null,"code":"var _jsxFileName = \"D:\\\\AREACTPROJECTS@IMPORTANT\\\\Frozen\\\\MERL(NewSite)\\\\Client\\\\src\\\\pages\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Grid from \"@mui/material/Grid\";\nimport { Post } from \"../components/Post\";\nimport { TagsBlock } from \"../components/TagsBlock\";\nimport { CommentsBlock } from \"../components/CommentsBlock\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPosts, fetchTags } from \"../redux/slice/postSlice\";\nimport dateConverter from \"../utils/dateConverter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [activeTab, setActiveTab] = useState(0);\n  const {\n    allComments\n  } = useSelector(state => state.com); //pull out posts and tags from postReducer\n\n  const {\n    posts,\n    tags\n  } = useSelector(state => state.post); //pulling out the status for checking if posts are loaded\n\n  const isPostsLoading = posts.status === \"loading\";\n  const isTagsLoading = tags.status === \"loading\";\n  const userData = useSelector(state => state.auth.data);\n  React.useEffect(() => {\n    try {\n      //calling two requests for getting a posts and tags\n      //if you just write the fetchPosts it won`t work cause you need fuction to be called for of make the request\n      dispatch(fetchPosts());\n      dispatch(fetchTags());\n    } catch (error) {\n      console.log(\"failure to get posts\", error);\n    }\n  }, []); //\n\n  const popular = Array.isArray(posts === null || posts === void 0 ? void 0 : posts.items) // Check if posts.items is an array\n  ? [...posts.items].sort(function (a, b) {\n    // If it is, create a copy of the array and sort it\n    if (a.views > b.views) return -1; // Compare the views count of two posts\n\n    return 0; // If the views count is the same, maintain the order\n  }) : []; // If posts.items is not an array, set popular as an empty array\n\n  const handleChangeTabs = (e, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  function TabNew() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      xs: 8,\n      item: true,\n      children: (isPostsLoading ? [...Array(5)] : posts.items).map(item => isPostsLoading ? /*#__PURE__*/_jsxDEV(Post, {\n        isLoading: isPostsLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Post, {\n        id: item._id,\n        title: item.title,\n        imageUrl: item.image ? `http://localhost:4420${item.image}` : \"\",\n        user: item.user,\n        createdAt: dateConverter(item.createdAt),\n        viewsCount: item.views,\n        commentsCount: 3,\n        tags: item.tags //comparing post-userId and userId-from-store\n        ,\n        isEditable: Boolean(item.user._id === (userData === null || userData === void 0 ? void 0 : userData._id))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n  function TabPopular() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      xs: 8,\n      item: true,\n      children: (isPostsLoading ? [...Array(5)] : popular).map(item => isPostsLoading ? /*#__PURE__*/_jsxDEV(Post, {\n        isLoading: isPostsLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Post, {\n        id: item._id,\n        title: item.title,\n        imageUrl: item.image ? `http://localhost:4420${item.image}` : \"\",\n        user: item.user,\n        createdAt: dateConverter(item.createdAt),\n        viewsCount: item.views,\n        commentsCount: 3,\n        tags: item.tags //comparing post-userId and userId-from-store\n        ,\n        isEditable: Boolean(item.user._id === (userData === null || userData === void 0 ? void 0 : userData._id))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tabs, {\n      value: activeTab,\n      onChange: handleChangeTabs,\n      style: {\n        marginBottom: 15\n      },\n      \"aria-label\": \"basic tabs example\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"New\",\n        value: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Popular\",\n        value: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: [activeTab === 0 ? /*#__PURE__*/_jsxDEV(TabNew, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 36\n      }, this) : /*#__PURE__*/_jsxDEV(TabPopular, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 4,\n        item: true,\n        children: [/*#__PURE__*/_jsxDEV(TagsBlock, {\n          items: tags.items,\n          isLoading: isTagsLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CommentsBlock, {\n          items: [{\n            user: {\n              fullName: \"Вася Пупкин\",\n              avatarUrl: \"https://mui.com/static/images/avatar/1.jpg\"\n            },\n            text: \"Это тестовый комментарий\"\n          }, {\n            user: {\n              fullName: \"Иван Иванов\",\n              avatarUrl: \"https://mui.com/static/images/avatar/2.jpg\"\n            },\n            text: \"When displaying three lines or more, the avatar is not aligned at the top. You should set the prop to align the avatar at the top\"\n          }],\n          isLoading: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"2J0STndFVAPmrULGn8VVYReCQug=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","Tabs","Tab","Grid","Post","TagsBlock","CommentsBlock","useDispatch","useSelector","fetchPosts","fetchTags","dateConverter","Home","dispatch","activeTab","setActiveTab","allComments","state","com","posts","tags","post","isPostsLoading","status","isTagsLoading","userData","auth","data","useEffect","error","console","log","popular","Array","isArray","items","sort","a","b","views","handleChangeTabs","e","newValue","TabNew","map","item","_id","title","image","user","createdAt","Boolean","TabPopular","marginBottom","fullName","avatarUrl","text"],"sources":["D:/AREACTPROJECTS@IMPORTANT/Frozen/MERL(NewSite)/Client/src/pages/Home.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Post } from \"../components/Post\";\r\nimport { TagsBlock } from \"../components/TagsBlock\";\r\nimport { CommentsBlock } from \"../components/CommentsBlock\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchPosts, fetchTags } from \"../redux/slice/postSlice\";\r\nimport dateConverter from \"../utils/dateConverter\";\r\nexport const Home = () => {\r\n    const dispatch = useDispatch();\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const { allComments } = useSelector((state) => state.com)\r\n    //pull out posts and tags from postReducer\r\n    const { posts, tags } = useSelector((state) => state.post);\r\n    //pulling out the status for checking if posts are loaded\r\n    const isPostsLoading = posts.status === \"loading\";\r\n    const isTagsLoading = tags.status === \"loading\";\r\n\r\n    const userData = useSelector((state) => state.auth.data);\r\n    React.useEffect(() => {\r\n        try {\r\n            //calling two requests for getting a posts and tags\r\n            //if you just write the fetchPosts it won`t work cause you need fuction to be called for of make the request\r\n            dispatch(fetchPosts());\r\n            dispatch(fetchTags());\r\n\r\n        } catch (error) {\r\n            console.log(\"failure to get posts\", error);\r\n        }\r\n    }, []);\r\n    //\r\n    const popular = Array.isArray(posts?.items) // Check if posts.items is an array\r\n        ? [...posts.items].sort(function (a, b) {\r\n            // If it is, create a copy of the array and sort it\r\n            if (a.views > b.views) return -1; // Compare the views count of two posts\r\n            return 0; // If the views count is the same, maintain the order\r\n        })\r\n        : []; // If posts.items is not an array, set popular as an empty array\r\n    const handleChangeTabs = (e, newValue) => {\r\n        setActiveTab(newValue);\r\n    };\r\n    function TabNew() {\r\n        return (\r\n            <Grid xs={8} item>\r\n                {(isPostsLoading ? [...Array(5)] : posts.items).map((item) =>\r\n                    isPostsLoading ? (\r\n                        <Post isLoading={isPostsLoading} />\r\n                    ) : (\r\n                        <Post\r\n                            id={item._id}\r\n                            title={item.title}\r\n                            imageUrl={item.image ? `http://localhost:4420${item.image}` : \"\"}\r\n                            user={item.user}\r\n                            createdAt={dateConverter(item.createdAt)}\r\n                            viewsCount={item.views}\r\n                            commentsCount={3}\r\n                            tags={item.tags}\r\n                            //comparing post-userId and userId-from-store\r\n                            isEditable={Boolean(item.user._id === userData?._id)}\r\n                        />\r\n                    )\r\n                )}\r\n            </Grid>\r\n        );\r\n    }\r\n    function TabPopular() {\r\n        return (\r\n            <Grid xs={8} item>\r\n                {(isPostsLoading ? [...Array(5)] : popular).map((item) =>\r\n                    isPostsLoading ? (\r\n                        <Post isLoading={isPostsLoading} />\r\n                    ) : (\r\n                        <Post\r\n                            id={item._id}\r\n                            title={item.title}\r\n                            imageUrl={item.image ? `http://localhost:4420${item.image}` : \"\"}\r\n                            user={item.user}\r\n                            createdAt={dateConverter(item.createdAt)}\r\n                            viewsCount={item.views}\r\n                            commentsCount={3}\r\n                            tags={item.tags}\r\n                            //comparing post-userId and userId-from-store\r\n                            isEditable={Boolean(item.user._id === userData?._id)}\r\n                        />\r\n                    )\r\n                )}\r\n            </Grid>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <Tabs\r\n                value={activeTab}\r\n                onChange={handleChangeTabs}\r\n                style={{ marginBottom: 15 }}\r\n                aria-label=\"basic tabs example\"\r\n            >\r\n                <Tab label=\"New\" value={0} />\r\n                <Tab label=\"Popular\" value={1} />\r\n            </Tabs>\r\n\r\n            <Grid container spacing={4}>\r\n                {activeTab === 0 ? <TabNew /> : <TabPopular />}\r\n                <Grid xs={4} item>\r\n                    <TagsBlock items={tags.items} isLoading={isTagsLoading} />\r\n                    <CommentsBlock\r\n                        items={[\r\n                            {\r\n                                user: {\r\n                                    fullName: \"Вася Пупкин\",\r\n                                    avatarUrl: \"https://mui.com/static/images/avatar/1.jpg\",\r\n                                },\r\n                                text: \"Это тестовый комментарий\",\r\n                            },\r\n                            {\r\n                                user: {\r\n                                    fullName: \"Иван Иванов\",\r\n                                    avatarUrl: \"https://mui.com/static/images/avatar/2.jpg\",\r\n                                },\r\n                                text: \"When displaying three lines or more, the avatar is not aligned at the top. You should set the prop to align the avatar at the top\",\r\n                            },\r\n                        ]}\r\n                        isLoading={false}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,0BAAtC;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;;AACA,OAAO,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACtB,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,CAAD,CAA1C;EACA,MAAM;IAAEgB;EAAF,IAAkBR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,GAAlB,CAAnC,CAHsB,CAItB;;EACA,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAkBZ,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACI,IAAlB,CAAnC,CALsB,CAMtB;;EACA,MAAMC,cAAc,GAAGH,KAAK,CAACI,MAAN,KAAiB,SAAxC;EACA,MAAMC,aAAa,GAAGJ,IAAI,CAACG,MAAL,KAAgB,SAAtC;EAEA,MAAME,QAAQ,GAAGjB,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACS,IAAN,CAAWC,IAAvB,CAA5B;EACA5B,KAAK,CAAC6B,SAAN,CAAgB,MAAM;IAClB,IAAI;MACA;MACA;MACAf,QAAQ,CAACJ,UAAU,EAAX,CAAR;MACAI,QAAQ,CAACH,SAAS,EAAV,CAAR;IAEH,CAND,CAME,OAAOmB,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC;IACH;EACJ,CAVD,EAUG,EAVH,EAXsB,CAsBtB;;EACA,MAAMG,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcf,KAAd,aAAcA,KAAd,uBAAcA,KAAK,CAAEgB,KAArB,EAA4B;EAA5B,EACV,CAAC,GAAGhB,KAAK,CAACgB,KAAV,EAAiBC,IAAjB,CAAsB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IACpC;IACA,IAAID,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAhB,EAAuB,OAAO,CAAC,CAAR,CAFa,CAEF;;IAClC,OAAO,CAAP,CAHoC,CAG1B;EACb,CAJC,CADU,GAMV,EANN,CAvBsB,CA6BZ;;EACV,MAAMC,gBAAgB,GAAG,CAACC,CAAD,EAAIC,QAAJ,KAAiB;IACtC3B,YAAY,CAAC2B,QAAD,CAAZ;EACH,CAFD;;EAGA,SAASC,MAAT,GAAkB;IACd,oBACI,QAAC,IAAD;MAAM,EAAE,EAAE,CAAV;MAAa,IAAI,MAAjB;MAAA,UACK,CAACrB,cAAc,GAAG,CAAC,GAAGW,KAAK,CAAC,CAAD,CAAT,CAAH,GAAmBd,KAAK,CAACgB,KAAxC,EAA+CS,GAA/C,CAAoDC,IAAD,IAChDvB,cAAc,gBACV,QAAC,IAAD;QAAM,SAAS,EAAEA;MAAjB;QAAA;QAAA;QAAA;MAAA,QADU,gBAGV,QAAC,IAAD;QACI,EAAE,EAAEuB,IAAI,CAACC,GADb;QAEI,KAAK,EAAED,IAAI,CAACE,KAFhB;QAGI,QAAQ,EAAEF,IAAI,CAACG,KAAL,GAAc,wBAAuBH,IAAI,CAACG,KAAM,EAAhD,GAAoD,EAHlE;QAII,IAAI,EAAEH,IAAI,CAACI,IAJf;QAKI,SAAS,EAAEtC,aAAa,CAACkC,IAAI,CAACK,SAAN,CAL5B;QAMI,UAAU,EAAEL,IAAI,CAACN,KANrB;QAOI,aAAa,EAAE,CAPnB;QAQI,IAAI,EAAEM,IAAI,CAACzB,IARf,CASI;QATJ;QAUI,UAAU,EAAE+B,OAAO,CAACN,IAAI,CAACI,IAAL,CAAUH,GAAV,MAAkBrB,QAAlB,aAAkBA,QAAlB,uBAAkBA,QAAQ,CAAEqB,GAA5B,CAAD;MAVvB;QAAA;QAAA;QAAA;MAAA,QAJP;IADL;MAAA;MAAA;MAAA;IAAA,QADJ;EAsBH;;EACD,SAASM,UAAT,GAAsB;IAClB,oBACI,QAAC,IAAD;MAAM,EAAE,EAAE,CAAV;MAAa,IAAI,MAAjB;MAAA,UACK,CAAC9B,cAAc,GAAG,CAAC,GAAGW,KAAK,CAAC,CAAD,CAAT,CAAH,GAAmBD,OAAlC,EAA2CY,GAA3C,CAAgDC,IAAD,IAC5CvB,cAAc,gBACV,QAAC,IAAD;QAAM,SAAS,EAAEA;MAAjB;QAAA;QAAA;QAAA;MAAA,QADU,gBAGV,QAAC,IAAD;QACI,EAAE,EAAEuB,IAAI,CAACC,GADb;QAEI,KAAK,EAAED,IAAI,CAACE,KAFhB;QAGI,QAAQ,EAAEF,IAAI,CAACG,KAAL,GAAc,wBAAuBH,IAAI,CAACG,KAAM,EAAhD,GAAoD,EAHlE;QAII,IAAI,EAAEH,IAAI,CAACI,IAJf;QAKI,SAAS,EAAEtC,aAAa,CAACkC,IAAI,CAACK,SAAN,CAL5B;QAMI,UAAU,EAAEL,IAAI,CAACN,KANrB;QAOI,aAAa,EAAE,CAPnB;QAQI,IAAI,EAAEM,IAAI,CAACzB,IARf,CASI;QATJ;QAUI,UAAU,EAAE+B,OAAO,CAACN,IAAI,CAACI,IAAL,CAAUH,GAAV,MAAkBrB,QAAlB,aAAkBA,QAAlB,uBAAkBA,QAAQ,CAAEqB,GAA5B,CAAD;MAVvB;QAAA;QAAA;QAAA;MAAA,QAJP;IADL;MAAA;MAAA;MAAA;IAAA,QADJ;EAsBH;;EACD,oBACI;IAAA,wBACI,QAAC,IAAD;MACI,KAAK,EAAEhC,SADX;MAEI,QAAQ,EAAE0B,gBAFd;MAGI,KAAK,EAAE;QAAEa,YAAY,EAAE;MAAhB,CAHX;MAII,cAAW,oBAJf;MAAA,wBAMI,QAAC,GAAD;QAAK,KAAK,EAAC,KAAX;QAAiB,KAAK,EAAE;MAAxB;QAAA;QAAA;QAAA;MAAA,QANJ,eAOI,QAAC,GAAD;QAAK,KAAK,EAAC,SAAX;QAAqB,KAAK,EAAE;MAA5B;QAAA;QAAA;QAAA;MAAA,QAPJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAWI,QAAC,IAAD;MAAM,SAAS,MAAf;MAAgB,OAAO,EAAE,CAAzB;MAAA,WACKvC,SAAS,KAAK,CAAd,gBAAkB,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QAAlB,gBAA+B,QAAC,UAAD;QAAA;QAAA;QAAA;MAAA,QADpC,eAEI,QAAC,IAAD;QAAM,EAAE,EAAE,CAAV;QAAa,IAAI,MAAjB;QAAA,wBACI,QAAC,SAAD;UAAW,KAAK,EAAEM,IAAI,CAACe,KAAvB;UAA8B,SAAS,EAAEX;QAAzC;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,aAAD;UACI,KAAK,EAAE,CACH;YACIyB,IAAI,EAAE;cACFK,QAAQ,EAAE,aADR;cAEFC,SAAS,EAAE;YAFT,CADV;YAKIC,IAAI,EAAE;UALV,CADG,EAQH;YACIP,IAAI,EAAE;cACFK,QAAQ,EAAE,aADR;cAEFC,SAAS,EAAE;YAFT,CADV;YAKIC,IAAI,EAAE;UALV,CARG,CADX;UAiBI,SAAS,EAAE;QAjBf;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAXJ;EAAA,gBADJ;AAuCH,CAxHM;;GAAM5C,I;UACQL,W,EAEOC,W,EAEAA,W,EAKPA,W;;;KAVRI,I"},"metadata":{},"sourceType":"module"}