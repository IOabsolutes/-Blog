{"ast":null,"code":"var _jsxFileName = \"D:\\\\AREACTPROJECTS@IMPORTANT\\\\Frozen\\\\MERL(NewSite)\\\\Client\\\\src\\\\pages\\\\FullPost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Post } from \"../components/Post\";\nimport { Index } from \"../components/AddComment\";\nimport { CommentsBlock } from \"../components/CommentsBlock\";\nimport { useParams } from \"react-router-dom\";\nimport Markdown from \"react-markdown\";\nimport dateConverter from \"../utils/dateConverter\";\nimport axios from \"../axios\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPostComments } from \"../redux/slice/commentSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FullPost = () => {\n  _s();\n\n  const dispatch = useDispatch(); // getting post id from dynamic parameter in routerF\n\n  const {\n    id: postId\n  } = useParams();\n  const {\n    postComments\n  } = useSelector(state => state.com); // declarate two states one for storing data second for checking is loaded or not\n\n  const [data, getData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // for the first loaded make the GET req to get post infomation and store it into state also remove the loading\n\n  useEffect(() => {\n    try {\n      axios.get(`/posts/${postId}`).then(res => {\n        getData(res.data);\n        setIsLoading(!isLoading);\n        dispatch(fetchPostComments(postId));\n      });\n    } catch (error) {\n      return console.log(\"faliure to get the post\", error);\n    }\n  }, []);\n  console.log(postComments.items.length); // we will returning the loding Post utill it would loaded\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Post, {\n      isLoading: isLoading,\n      isFullPost: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Post, {\n      id: data._id,\n      title: data.title,\n      imageUrl: data.image ? `http://localhost:4420${data.image}` : \"\",\n      user: data.user,\n      createdAt: dateConverter(data.createdAt),\n      viewsCount: data.views,\n      commentsCount: postComments.items.length,\n      tags: data.tags,\n      isFullPost: true,\n      children: /*#__PURE__*/_jsxDEV(Markdown, {\n        children: data.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentsBlock, {\n      items: [...Array(5)] && postComments.items,\n      isLoading: false,\n      children: /*#__PURE__*/_jsxDEV(Index, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FullPost, \"u/mEByn+356dkJ7H5rSMe7q7iWU=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = FullPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"FullPost\");","map":{"version":3,"names":["React","useState","useEffect","Post","Index","CommentsBlock","useParams","Markdown","dateConverter","axios","useSelector","useDispatch","fetchPostComments","FullPost","dispatch","id","postId","postComments","state","com","data","getData","isLoading","setIsLoading","get","then","res","error","console","log","items","length","_id","title","image","user","createdAt","views","tags","text","Array"],"sources":["D:/AREACTPROJECTS@IMPORTANT/Frozen/MERL(NewSite)/Client/src/pages/FullPost.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Post } from \"../components/Post\";\r\nimport { Index } from \"../components/AddComment\";\r\nimport { CommentsBlock } from \"../components/CommentsBlock\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Markdown from \"react-markdown\";\r\nimport dateConverter from \"../utils/dateConverter\";\r\nimport axios from \"../axios\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchPostComments } from \"../redux/slice/commentSlice\";\r\nexport const FullPost = () => {\r\n  const dispatch = useDispatch();\r\n  // getting post id from dynamic parameter in routerF\r\n  const { id: postId } = useParams();\r\n  const { postComments } = useSelector((state) => state.com);\r\n  // declarate two states one for storing data second for checking is loaded or not\r\n  const [data, getData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  // for the first loaded make the GET req to get post infomation and store it into state also remove the loading\r\n  useEffect(() => {\r\n    try {\r\n      axios.get(`/posts/${postId}`).then((res) => {\r\n        getData(res.data);\r\n        setIsLoading(!isLoading);\r\n        dispatch(fetchPostComments(postId));\r\n      });\r\n    } catch (error) {\r\n      return console.log(\"faliure to get the post\", error);\r\n    }\r\n  }, []);\r\n  console.log(postComments.items.length)\r\n  // we will returning the loding Post utill it would loaded\r\n  if (isLoading) {\r\n    return <Post isLoading={isLoading} isFullPost />;\r\n  }\r\n  return (\r\n    <>\r\n      <Post\r\n        id={data._id}\r\n        title={data.title}\r\n        imageUrl={data.image ? `http://localhost:4420${data.image}` : \"\"}\r\n        user={data.user}\r\n        createdAt={dateConverter(data.createdAt)}\r\n        viewsCount={data.views}\r\n        commentsCount={postComments.items.length}\r\n        tags={data.tags}\r\n        isFullPost\r\n      >\r\n        <Markdown children={data.text} />\r\n      </Post>\r\n      <CommentsBlock\r\n        items={[...Array(5)] && postComments.items}\r\n        isLoading={false}\r\n      >\r\n        <Index />\r\n      </CommentsBlock>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,QAAkC,6BAAlC;;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAC5B,MAAMC,QAAQ,GAAGH,WAAW,EAA5B,CAD4B,CAE5B;;EACA,MAAM;IAAEI,EAAE,EAAEC;EAAN,IAAiBV,SAAS,EAAhC;EACA,MAAM;IAAEW;EAAF,IAAmBP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,GAAlB,CAApC,CAJ4B,CAK5B;;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,IAAD,CAA1C,CAP4B,CAQ5B;;EACAC,SAAS,CAAC,MAAM;IACd,IAAI;MACFO,KAAK,CAACe,GAAN,CAAW,UAASR,MAAO,EAA3B,EAA8BS,IAA9B,CAAoCC,GAAD,IAAS;QAC1CL,OAAO,CAACK,GAAG,CAACN,IAAL,CAAP;QACAG,YAAY,CAAC,CAACD,SAAF,CAAZ;QACAR,QAAQ,CAACF,iBAAiB,CAACI,MAAD,CAAlB,CAAR;MACD,CAJD;IAKD,CAND,CAME,OAAOW,KAAP,EAAc;MACd,OAAOC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAvC,CAAP;IACD;EACF,CAVQ,EAUN,EAVM,CAAT;EAWAC,OAAO,CAACC,GAAR,CAAYZ,YAAY,CAACa,KAAb,CAAmBC,MAA/B,EApB4B,CAqB5B;;EACA,IAAIT,SAAJ,EAAe;IACb,oBAAO,QAAC,IAAD;MAAM,SAAS,EAAEA,SAAjB;MAA4B,UAAU;IAAtC;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EACD,oBACE;IAAA,wBACE,QAAC,IAAD;MACE,EAAE,EAAEF,IAAI,CAACY,GADX;MAEE,KAAK,EAAEZ,IAAI,CAACa,KAFd;MAGE,QAAQ,EAAEb,IAAI,CAACc,KAAL,GAAc,wBAAuBd,IAAI,CAACc,KAAM,EAAhD,GAAoD,EAHhE;MAIE,IAAI,EAAEd,IAAI,CAACe,IAJb;MAKE,SAAS,EAAE3B,aAAa,CAACY,IAAI,CAACgB,SAAN,CAL1B;MAME,UAAU,EAAEhB,IAAI,CAACiB,KANnB;MAOE,aAAa,EAAEpB,YAAY,CAACa,KAAb,CAAmBC,MAPpC;MAQE,IAAI,EAAEX,IAAI,CAACkB,IARb;MASE,UAAU,MATZ;MAAA,uBAWE,QAAC,QAAD;QAAU,QAAQ,EAAElB,IAAI,CAACmB;MAAzB;QAAA;QAAA;QAAA;MAAA;IAXF;MAAA;MAAA;MAAA;IAAA,QADF,eAcE,QAAC,aAAD;MACE,KAAK,EAAE,CAAC,GAAGC,KAAK,CAAC,CAAD,CAAT,KAAiBvB,YAAY,CAACa,KADvC;MAEE,SAAS,EAAE,KAFb;MAAA,uBAIE,QAAC,KAAD;QAAA;QAAA;QAAA;MAAA;IAJF;MAAA;MAAA;MAAA;IAAA,QAdF;EAAA,gBADF;AAuBD,CAhDM;;GAAMjB,Q;UACMF,W,EAEML,S,EACEI,W;;;KAJdG,Q"},"metadata":{},"sourceType":"module"}