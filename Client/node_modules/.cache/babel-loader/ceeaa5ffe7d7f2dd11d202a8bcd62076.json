{"ast":null,"code":"var _jsxFileName = \"D:\\\\AREACTPROJECTS@IMPORTANT\\\\Frozen\\\\MERL(NewSite)\\\\Client\\\\src\\\\pages\\\\FullPost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Post } from \"../components/Post\";\nimport { Index } from \"../components/AddComment\";\nimport { CommentsBlock } from \"../components/CommentsBlock\";\nimport { useParams } from \"react-router-dom\";\nimport dateConverter from \"../utils/dateConverter\";\nimport axios from \"../axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FullPost = () => {\n  _s();\n\n  // getting post id from dynamic parameter in routerF\n  const {\n    id: postId\n  } = useParams(); // declarate two states one for storing data second for checking is loaded or not\n\n  const [data, getData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // for the first loaded make the GET req to get post infomation and store it into state also remove the loading\n\n  useEffect(() => {\n    try {\n      axios.get(`/posts/${postId}`).then(res => {\n        getData(res.data);\n        setIsLoading(!isLoading);\n      });\n    } catch (error) {\n      return console.log(\"faliure to get the post\", error);\n    }\n  }, []); // we will returning the loding Post utill it would loaded\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Post, {\n      isLoading: isLoading,\n      isFullPost: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Post, {\n      id: data._id,\n      title: data.title,\n      imageUrl: data.imageUrl,\n      user: {\n        fullName: data.user.fullName\n      },\n      createdAt: dateConverter(data.createdAt),\n      viewsCount: data.views,\n      commentsCount: 3,\n      tags: data.tags,\n      isFullPost: true,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: data.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentsBlock, {\n      items: [{\n        user: {\n          fullName: \"Вася Пупкин\",\n          avatarUrl: \"https://mui.com/static/images/avatar/1.jpg\"\n        },\n        text: \"Это тестовый комментарий 555555\"\n      }, {\n        user: {\n          fullName: \"Иван Иванов\",\n          avatarUrl: \"https://mui.com/static/images/avatar/2.jpg\"\n        },\n        text: \"When displaying three lines or more, the avatar is not aligned at the top. You should set the prop to align the avatar at the top\"\n      }],\n      isLoading: false,\n      children: /*#__PURE__*/_jsxDEV(Index, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FullPost, \"BgWyv/plHcC/NBrx8GnOE6G11bg=\", false, function () {\n  return [useParams];\n});\n\n_c = FullPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"FullPost\");","map":{"version":3,"names":["React","useState","useEffect","Post","Index","CommentsBlock","useParams","dateConverter","axios","FullPost","id","postId","data","getData","isLoading","setIsLoading","get","then","res","error","console","log","_id","title","imageUrl","fullName","user","createdAt","views","tags","text","avatarUrl"],"sources":["D:/AREACTPROJECTS@IMPORTANT/Frozen/MERL(NewSite)/Client/src/pages/FullPost.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Post } from \"../components/Post\";\r\nimport { Index } from \"../components/AddComment\";\r\nimport { CommentsBlock } from \"../components/CommentsBlock\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport dateConverter from \"../utils/dateConverter\";\r\nimport axios from \"../axios\";\r\nexport const FullPost = () => {\r\n  // getting post id from dynamic parameter in routerF\r\n  const { id: postId } = useParams();\r\n  // declarate two states one for storing data second for checking is loaded or not\r\n  const [data, getData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  // for the first loaded make the GET req to get post infomation and store it into state also remove the loading\r\n  useEffect(() => {\r\n    try {\r\n      axios.get(`/posts/${postId}`).then((res) => {\r\n        getData(res.data);\r\n        setIsLoading(!isLoading);\r\n      });\r\n    } catch (error) {\r\n      return console.log(\"faliure to get the post\", error);\r\n    }\r\n  }, []);\r\n  // we will returning the loding Post utill it would loaded\r\n  if (isLoading) {\r\n    return <Post isLoading={isLoading} isFullPost />;\r\n  }\r\n  return (\r\n    <>\r\n      <Post\r\n        id={data._id}\r\n        title={data.title}\r\n        imageUrl={data.imageUrl}\r\n        user={{\r\n          fullName: data.user.fullName,\r\n        }}\r\n        createdAt={dateConverter(data.createdAt)}\r\n        viewsCount={data.views}\r\n        commentsCount={3}\r\n        tags={data.tags}\r\n        isFullPost\r\n      >\r\n        <p>{data.text}</p>\r\n      </Post>\r\n      <CommentsBlock\r\n        items={[\r\n          {\r\n            user: {\r\n              fullName: \"Вася Пупкин\",\r\n              avatarUrl: \"https://mui.com/static/images/avatar/1.jpg\",\r\n            },\r\n            text: \"Это тестовый комментарий 555555\",\r\n          },\r\n          {\r\n            user: {\r\n              fullName: \"Иван Иванов\",\r\n              avatarUrl: \"https://mui.com/static/images/avatar/2.jpg\",\r\n            },\r\n            text: \"When displaying three lines or more, the avatar is not aligned at the top. You should set the prop to align the avatar at the top\",\r\n          },\r\n        ]}\r\n        isLoading={false}\r\n      >\r\n        <Index />\r\n      </CommentsBlock>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAC5B;EACA,MAAM;IAAEC,EAAE,EAAEC;EAAN,IAAiBL,SAAS,EAAhC,CAF4B,CAG5B;;EACA,MAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C,CAL4B,CAM5B;;EACAC,SAAS,CAAC,MAAM;IACd,IAAI;MACFM,KAAK,CAACQ,GAAN,CAAW,UAASL,MAAO,EAA3B,EAA8BM,IAA9B,CAAoCC,GAAD,IAAS;QAC1CL,OAAO,CAACK,GAAG,CAACN,IAAL,CAAP;QACAG,YAAY,CAAC,CAACD,SAAF,CAAZ;MACD,CAHD;IAID,CALD,CAKE,OAAOK,KAAP,EAAc;MACd,OAAOC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAvC,CAAP;IACD;EACF,CATQ,EASN,EATM,CAAT,CAP4B,CAiB5B;;EACA,IAAIL,SAAJ,EAAe;IACb,oBAAO,QAAC,IAAD;MAAM,SAAS,EAAEA,SAAjB;MAA4B,UAAU;IAAtC;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EACD,oBACE;IAAA,wBACE,QAAC,IAAD;MACE,EAAE,EAAEF,IAAI,CAACU,GADX;MAEE,KAAK,EAAEV,IAAI,CAACW,KAFd;MAGE,QAAQ,EAAEX,IAAI,CAACY,QAHjB;MAIE,IAAI,EAAE;QACJC,QAAQ,EAAEb,IAAI,CAACc,IAAL,CAAUD;MADhB,CAJR;MAOE,SAAS,EAAElB,aAAa,CAACK,IAAI,CAACe,SAAN,CAP1B;MAQE,UAAU,EAAEf,IAAI,CAACgB,KARnB;MASE,aAAa,EAAE,CATjB;MAUE,IAAI,EAAEhB,IAAI,CAACiB,IAVb;MAWE,UAAU,MAXZ;MAAA,uBAaE;QAAA,UAAIjB,IAAI,CAACkB;MAAT;QAAA;QAAA;QAAA;MAAA;IAbF;MAAA;MAAA;MAAA;IAAA,QADF,eAgBE,QAAC,aAAD;MACE,KAAK,EAAE,CACL;QACEJ,IAAI,EAAE;UACJD,QAAQ,EAAE,aADN;UAEJM,SAAS,EAAE;QAFP,CADR;QAKED,IAAI,EAAE;MALR,CADK,EAQL;QACEJ,IAAI,EAAE;UACJD,QAAQ,EAAE,aADN;UAEJM,SAAS,EAAE;QAFP,CADR;QAKED,IAAI,EAAE;MALR,CARK,CADT;MAiBE,SAAS,EAAE,KAjBb;MAAA,uBAmBE,QAAC,KAAD;QAAA;QAAA;QAAA;MAAA;IAnBF;MAAA;MAAA;MAAA;IAAA,QAhBF;EAAA,gBADF;AAwCD,CA7DM;;GAAMrB,Q;UAEYH,S;;;KAFZG,Q"},"metadata":{},"sourceType":"module"}